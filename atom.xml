<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allan&#39;s Blog(by Hexo)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-30T14:55:03.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Allan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swaggernote</title>
    <link href="http://yoursite.com/2018/06/30/swaggernote/"/>
    <id>http://yoursite.com/2018/06/30/swaggernote/</id>
    <published>2018-06-30T14:33:32.000Z</published>
    <updated>2018-06-30T14:55:03.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger学习笔记"><a href="#Swagger学习笔记" class="headerlink" title="Swagger学习笔记"></a>Swagger学习笔记</h1><p>​最近由于工作需要，要开发大量的接口提供给项目内外使用。于是产生了较高频率的接口开发、测试，接口文档编写工作，也就是在这个过程中接触到了Swagger这个工具。这里用这段时间来使用Swagger的一些心得体会，结合使用过程中查阅的一些资料做一个简单学习记录。</p><h2 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger"></a>什么是Swagger</h2><blockquote><p><strong>Swagger</strong>  is a set of open-source tools built around the OpenAPI Specification that can help you design, build, document and consume REST APIs. </p></blockquote><p>​简单的说，Swagger是一个帮助程序员对REST风格API进行设计、创建、建立文档以及定制的工具。这个是Swagger官方对Swagger的定义。</p><p>​对于我的实际使用过程来说，Swagger最重要的能力体现在：接口文档的快速生成，以及对开发好的接口进行方便快速的测试。</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>​由于我的项目是基于Springboot，集成swagger的任务就落在了<strong>Springfox</strong><a href="http://springfox.github.io/springfox/" target="_blank" rel="noopener">^1</a>上。先来说一下Springfox与swagger的关系，swagger是API设计定制等的一个强大工具，Springfox是其在Java方面的比较优秀的实现，它由<em>swagger-springmvc</em>发展而来，下面是Springfox官方的历史介绍：</p><blockquote><p>Springfox has evolved from a project originally created by <a href="https://github.com/martypitt" target="_blank" rel="noopener">Marty Pitt</a> and was named <em>swagger-springmvc</em>. Much kudos goes to Marty. </p></blockquote><p>​项目中使用Springfox，简要的流程就是：加入依赖(maven/gradle)-&gt;创建配置类-&gt;使用注解植入Api-&gt;通过swagger-ui查看Api文档或进行简单测试。类似的教程博客在网上一抓一大把，这里也就不详细记录了，其实最好的途径是看<a href="http://springfox.github.io/springfox/docs/current/#getting-started" target="_blank" rel="noopener">这里</a>。</p><p>​实际界面效果在公司内网就不放了，效果可见swagger官方的<a href="https://petstore.swagger.io/" target="_blank" rel="noopener">petstore</a>样例，区别不大。项目中最主要的使用就在这个页面上了，<strong>文档</strong>和<strong>Try it out!</strong>。</p><h2 id="学习深入"><a href="#学习深入" class="headerlink" title="学习深入"></a>学习深入</h2><p>​使用过程中还是有一些东西值得记录一下，算不上什么高级的技巧，就一些经验体会吧。</p><p>​<strong>引入Springfox</strong></p><p>​我的项目中只引入了两个重要的组件<em>springfox-swagger2</em>和<em>springfox-swagger-ui</em>，使用maven引入，版本号为2.2.2。前者是核心组件，用来生成Api文档，后者是集成的swagger-ui，可以对生成的Api文档进行渲染方便使用。</p><p>​<strong>创建配置类</strong></p><p>​配置类重要的是加入两个注解@Configuration和@EnableSwagger2。实际上这两个注解将包括该类在内的一系列bean注册到spring上下文中，通过这些bean的功能即启用了swagger。配置类中可以新建Docket，不建的话springfox会创建一个默认的docket，将所有读取到的接口归集到该默认docket下，docket的配置很简单，以建造者模式来构建，方法名也很容易读懂，完整的使用可以参考<a href="http://springfox.github.io/springfox/javadoc/current/" target="_blank" rel="noopener">这里</a>。</p><p>​<strong>使用注解</strong></p><p>​通过对Api添加注解，swagger能扫描到这些接口信息，并且生成文档。项目中最常用的注解有两个 <code>@ApiOperation</code> 和 <code>@ApiParam</code><br>前者是用于描述Api的名称及作用，后者直接用于描述具体的参数。其实对于一个接口来说，有接口名、请求参数再加上返回结果的描述就已经很完整了，由于项目的接口返回是统一的格式，也就没有在swagger中再添加描述，于是，上面两个注解就满足了项目需求。当然，这只是Springfox注解的冰山一角，可以看SwaggerAnnotation<a href="http://docs.swagger.io/swagger-core/v1.5.0/apidocs/io/swagger/annotations/package-summary.html" target="_blank" rel="noopener">^3</a>文档的完整描述。</p><p>​<strong>Swagger-UI</strong></p><p>​通过<a href="http://ip:port/your-app-root/swagger-ui.html" target="_blank" rel="noopener">http://ip:port/your-app-root/swagger-ui.html</a> 访问到Springfox生成的Swagger-UI页面，这是最直接的使用。实际上，Springfox生成的Api文档在<a href="http://ip:port/your-app-root/v2/api-docs" target="_blank" rel="noopener">http://ip:port/your-app-root/v2/api-docs</a> 。在springfox-swagger2包下的Swagger2Controller类下可以找到这个默认URL，而且这个类添加了<code>@ApiIgnore</code>注解忽略了这些接口，不影响业务接口。说是默认，也就是说这个路径是可以配置的，扒了官方文档<a href="http://springfox.github.io/springfox/docs/current/#introduction" target="_blank" rel="noopener">^2</a>，找到这里：</p><blockquote><h3 id="6-2-Customizing-the-swagger-endpoints"><a href="#6-2-Customizing-the-swagger-endpoints" class="headerlink" title="6.2. Customizing the swagger endpoints."></a>6.2. Customizing the swagger endpoints.</h3><p>By default the swagger service descriptions are generated at the following urls</p><table><thead><tr><th>Swagger version</th><th>Documentation Url</th><th>Group</th></tr></thead><tbody><tr><td>2.0</td><td>/v2/api-docs?group=external</td><td><strong>external</strong> group via docket.groupName()</td></tr><tr><td>1.2</td><td>/api-docs</td><td>implicit <strong>default</strong> group</td></tr><tr><td>1.2</td><td>/api-docs?group=external</td><td><strong>external</strong> group via docket.groupName()</td></tr><tr><td>2.0</td><td>/v2/api-docs</td><td>implicit <strong>default</strong> group</td></tr></tbody></table><p>To customize these endpoints, loading a <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html" target="_blank" rel="noopener">property source</a> with the following properties allows the properties to be overridden</p><table><thead><tr><th>Swagger version</th><th>Override property</th></tr></thead><tbody><tr><td>2.0</td><td>springfox.documentation.swagger.v2.path</td></tr><tr><td>1.2</td><td>springfox.documentation.swagger.v1.path</td></tr></tbody></table></blockquote><p>所以，只要加载一个properties文件，里面写上（版本2.0）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springfox.documentation.swagger.v2.path=/my/docs</span><br></pre></td></tr></table></figure><p>就可以自定义路径了。</p><p>​得到的这个Api文档，就是Swagger官方定义的Api文档格式，你甚至可以直接把它复制出来放到Swagger的线上Swagger-Editor中去，渲染的页面和本地访问到的是一样的。<br>​实际上，这个页面有很多大神是不满意的，不够漂亮，阅读也不够方便，特别是接口数量比较多的情况下。既然拿到了页面渲染的源文件，即这个Api文档(这个文档后面还会提到)，自然可以自己进行解析渲染出想要的页面来。在这里推荐两个最有名的优秀开源项目<a href="https://github.com/xiaoymin/Swagger-Bootstrap-UI" target="_blank" rel="noopener"><strong>Swagger-bootstrap-ui</strong></a>和<a href="https://github.com/caspar-chen/swagger-ui-layer" target="_blank" rel="noopener"><strong>Swagger-UI-layer</strong></a>。比原生界面优美也更容易查阅。使用也很简单，在maven中引入，替换swagger-ui就行。<br>​    </p><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><p>以上内容基本上是项目开发过程中所用到的全部相关了，接下来的一些是查阅资料过程发现的更多值得学习的东西，先做记录，有机会会将这些内容进行实践。</p><p>前面提到了Swagger的Api文档，这个文档，<a href="http://swagger.io" target="_blank" rel="noopener">Swagger官网</a>有详细的资料。文档的语法，可以从<a href="https://github.com/OAI/OpenAPI-Specification" target="_blank" rel="noopener">这里</a>（官方文档）学习。不过这两篇<a href="https://legacy.gitbook.com/book/huangwenchao/swagger/details" target="_blank" rel="noopener">文章</a>对Swagger语法的讲解非常到位，值得学习。Springfox导出的Api文档是json格式的，官方推荐书写的时候使用yaml，这两者基本上可以无缝对接，我倒觉得没有太纠结使用哪个的必要。</p><p>Swagger-Editor，官方的线上Swagger-Editor是可以编辑Api文档的，并且可以直接预览，就如MacDown这样的风格。它是可以部署到本地的，这样可以离线使用，并且还有个好处是自动生成代码更快，不用辛苦的等待下载。说到下载，在线生成代码时，一定不要用迅雷下载（目前还不知道为什么，血泪教训T_T）。<br>​</p><p>参考资料：</p><p>[^9]: </p><p><a href="https://blog.csdn.net/w4hechuan2009/article/details/68892718" target="_blank" rel="noopener">https://blog.csdn.net/w4hechuan2009/article/details/68892718</a></p><p><a href="https://blog.csdn.net/i6448038/article/details/77622977" target="_blank" rel="noopener">https://blog.csdn.net/i6448038/article/details/77622977</a></p><p><a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swagger学习笔记&quot;&gt;&lt;a href=&quot;#Swagger学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Swagger学习笔记&quot;&gt;&lt;/a&gt;Swagger学习笔记&lt;/h1&gt;&lt;p&gt;​最近由于工作需要，要开发大量的接口提供给项目内外使用。于是产生了较
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2018/06/10/%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2018/06/10/随笔/</id>
    <published>2018-06-10T10:32:16.000Z</published>
    <updated>2018-06-10T10:39:01.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2018-06-10"><a href="#2018-06-10" class="headerlink" title="2018-06-10"></a>2018-06-10</h3><p>上班的日子总是过的飞快，一周又一周。<br>工作日是 上班-下班 一条线，周末 宅 一个点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2018-06-10&quot;&gt;&lt;a href=&quot;#2018-06-10&quot; class=&quot;headerlink&quot; title=&quot;2018-06-10&quot;&gt;&lt;/a&gt;2018-06-10&lt;/h3&gt;&lt;p&gt;上班的日子总是过的飞快，一周又一周。&lt;br&gt;工作日是 上班-下班 一条线，周
      
    
    </summary>
    
    
      <category term="-essay" scheme="http://yoursite.com/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>Markdownnotes</title>
    <link href="http://yoursite.com/2018/05/31/markdownnotes/"/>
    <id>http://yoursite.com/2018/05/31/markdownnotes/</id>
    <published>2018-05-30T16:09:18.000Z</published>
    <updated>2018-06-30T14:55:57.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown笔记"><a href="#Markdown笔记" class="headerlink" title="Markdown笔记"></a>Markdown笔记</h1><p>  第一篇博客，先给Markdown。不搭建这个博客，都还不知道有Markdown这种神奇的书写方式存在。</p><blockquote><p> markdown是为那些需要经常码字或者进行文字排版的、对码字手速和排版顺畅度有要求的人群设计的，他们希望用键盘把文字内容啪啪啪地打出来后就已经排版好了，最好从头到尾都不要使用鼠标。</p></blockquote><p>  这对于博客的写作来说，简直就是天合。一直以来用的文本编辑是Notepad++，它对于程序语言非常友好，很多类型的程序语言都有支持，但也紧限于程序语言。若需要对文字进行排版，甚至加入图片表格等元素，基本上想到的都是word了。不过，word的局限就是，限于本地进行，必须依赖其庞大的软件功能。<br>  html在排版效果的实现上面实际上已经非常的便捷并且功能非常丰富（虽然对我这个html新手来说并不容易就是了），但是Markdown让这个体验进一步的提升，它可以更加便捷的实现更常用的排版，书写博客的体验感提升是非常高的。<br>  既然要搭建博客，内容固然重要，如何把这些内容书写下来也是重要的一环，就从Markdown开始吧。</p><h2 id="Markdown语法笔记"><a href="#Markdown语法笔记" class="headerlink" title="Markdown语法笔记"></a>Markdown语法笔记</h2><h1 id="测试标题"><a href="#测试标题" class="headerlink" title="测试标题"></a>测试标题</h1><p>#测试标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>##二级标题</p><h3 id="标题三级…"><a href="#标题三级…" class="headerlink" title="标题三级…"></a>标题三级…</h3><center>居中文本</center><p>\&lt;center>居中文本\&lt;/center></p><p><u>下划线</u></p><p>\&lt;u>下划线\&lt;/u></p><p><del>删除线</del></p><p>~~删除线~~</p><p><strong>字体加粗</strong></p><p>**字体加粗**</p><p><em>斜体</em></p><p>*斜体*</p><blockquote><p>引用</p></blockquote><p>>引用</p><blockquote><blockquote><p>引用二</p></blockquote></blockquote><p>>>引用二</p><p><a href="https://baidu.com" title="baidu" target="_blank" rel="noopener">超链接(百度)</a></p><p>[超链接(百度)](<a href="https://baidu.com" target="_blank" rel="noopener">https://baidu.com</a> \”baidu\”)</p><p><a href="https://baidu.com" target="_blank" rel="noopener">https://baidu.com</a></p><hr><hr><p>分割线：--- or ***</p><p><code>单行代码xxxxxx</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(agrs[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"多行代码区域使用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```java(语言) + xxx(内容)```</p><ul><li>列表内容1</li></ul><ul><li>列表内容2</li></ul><ul><li>列表内容3</li></ul><ol><li><p>序列列表1</p></li><li><p>序列列表2</p></li><li><p>序列列表3</p></li></ol><ul><li><p>列表嵌套。</p><ul><li><p>二级列表。</p><ul><li><p>三级列表。</p><ul><li>三个空格。</li></ul></li></ul></li></ul></li></ul><table><thead><tr><th>表格—列1</th><th style="text-align:center">表格—列2</th><th style="text-align:right">表格—列3</th></tr></thead><tbody><tr><td>左对齐</td><td style="text-align:center">居中</td><td style="text-align:right">右对齐</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: 操作</span><br><span class="line">cond=&gt;condition: 是否?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>预期是流程图，不过还有些问题</p><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><ol><li><p>Macdown</p><p>OS X下开源Markdown编辑器，本篇博客就用它书写出来的，左右分页排版，左边原始文稿，右边预览模式。</p></li><li><p>Typora</p><p>win和mac及linux都有支持，编辑即所见的形式展现，按照Markdown语法编辑好后立即显示出排版结果，直观便捷。</p></li><li><p>Mou</p><p>还未使用过，之后有时间会去体验一下。</p></li></ol><p>参考：</p><p>知乎大佬们的介绍： <a href="https://www.zhihu.com/question/20409634" target="_blank" rel="noopener">https://www.zhihu.com/question/20409634</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown笔记&quot;&gt;&lt;a href=&quot;#Markdown笔记&quot; class=&quot;headerlink&quot; title=&quot;Markdown笔记&quot;&gt;&lt;/a&gt;Markdown笔记&lt;/h1&gt;&lt;p&gt;  第一篇博客，先给Markdown。不搭建这个博客，都还不知道有Markd
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="programming" scheme="http://yoursite.com/tags/programming/"/>
    
  </entry>
  
</feed>
